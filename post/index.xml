<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Sampad Kumar Kar</title>
    <link>https://sampadk04.github.io/post/</link>
    <description>Recent content in Projects on Sampad Kumar Kar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://sampadk04.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSM: An Efficient Alternative to Attention</title>
      <link>https://sampadk04.github.io/post/project-10/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-10/</guid>
      <description>This repository contains the code and data for my Master&amp;rsquo;s Thesis in Computer Science at Chennai Mathematical Institute. The thesis is titled &amp;ldquo;State Space Models: An Efficient Alternative to Attention&amp;rdquo; and is supervised by Professor Pranabendu Misra.
Abstract  The Transformer architecture, with its self-attention mechanism, has revolutionized deep learning but is computationally expensive for long sequences. This thesis surveys State Space Models (SSMs), including S4, Mamba, Linear Recurrent Units (LRUs), and Griffin, which offer efficiency and effectiveness in handling long-range dependencies.</description>
    </item>
    
    <item>
      <title>MyLocalGPT</title>
      <link>https://sampadk04.github.io/post/project-9/</link>
      <pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-9/</guid>
      <description>This is a mini-implementation of my own LocalGPT using Llama2. This is a project aimed at creating a localized version of GPT leveraging the capabilities of Llama2. This implementation allows users to ingest their own documents and query them using a powerful language model on their local device. The project includes scripts for setting up the environment, ingesting documents, and running the model, making it accessible for users to deploy and customize according to their needs.</description>
    </item>
    
    <item>
      <title>Neural Networks vs ARIMA</title>
      <link>https://sampadk04.github.io/post/project-8/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-8/</guid>
      <description>We conducted a comprehensive comparative study of forecasting performances for power consumption in Tetuan City using Sequential Networks LSTMs and a basic Transformer, benchmarking them against the traditional ARIMA model.
Our investigation focused on evaluating the effectiveness of Sequential Networks, particularly the basic Transformer model, in forecasting power consumption time series data for Tetuan City. Our primary aim was to assess whether these modern deep learning approaches can outperform the classical ARIMA model, specifically through a Mean Squared Error (MSE) comparison.</description>
    </item>
    
    <item>
      <title>Facial Emotion Detector</title>
      <link>https://sampadk04.github.io/post/project-7/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-7/</guid>
      <description>A facial emotion detector built from scratch using PyTorch and OpenCV.
Overview This project focuses on detecting facial emotions using a combination of deep learning and computer vision techniques. The system is capable of real-time emotion detection from webcam input.
Features Emotion Detector  Data: The model is trained on a facial expression dataset from Kaggle. Classifiers:  Custom ResNet-18 Implementation: A customized version of the ResNet-18 architecture. Transfer Learning: Utilizes a pre-trained ResNet-18 model on a subset of the ImageNet dataset to improve performance.</description>
    </item>
    
    <item>
      <title>ResNet-18</title>
      <link>https://sampadk04.github.io/post/project-6/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-6/</guid>
      <description>We present a comprehensive implementation of the ResNet-18 architecture from scratch using PyTorch. This project is inspired by the seminal paper &amp;ldquo;Deep Residual Learning for Image Recognition&amp;rdquo; by Kaiming He et al. Our implementation focuses on replicating the architecture and training it on the CIFAR-10 dataset to achieve robust image classification performance.
Overview ResNet-18 is a popular convolutional neural network architecture known for its use of residual learning to effectively train deep networks.</description>
    </item>
    
    <item>
      <title>AutoEncoders</title>
      <link>https://sampadk04.github.io/post/project-4/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-4/</guid>
      <description>This project showcases the implementation of three types of AutoEncoders on the MNIST handwritten digits dataset using PyTorch. The AutoEncoders implemented are:
 Simple AutoEncoder De-Noising AutoEncoder Variational AutoEncoder  The implementation of the Variational AutoEncoder is inspired by the seminal paper &amp;ldquo;Auto-Encoding Variational Bayes&amp;rdquo;.
Demonstrations Reconstruction of Simple AutoEncoder  Reconstruction of De-Noising AutoEncoder  Interpolation by Variational AutoEncoder  Link to my AutoEncoders GitHub Repository</description>
    </item>
    
    <item>
      <title>GANs</title>
      <link>https://sampadk04.github.io/post/project-5/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-5/</guid>
      <description>This project involves the implementation of four different types of Generative Adversarial Networks (GANs) using PyTorch. The GANs implemented are:
 Vanilla GAN Conditional GAN (CGAN) Deep Convolutional GAN (DCGAN) Attention GAN  Vanilla GAN A Vanilla GAN consists of two neural networks, a Generator and a Discriminator, which compete against each other in a zero-sum game. The Generator creates fake data samples, while the Discriminator attempts to distinguish between real and fake samples.</description>
    </item>
    
    <item>
      <title>Super Mario Bros with RL</title>
      <link>https://sampadk04.github.io/post/project-3/</link>
      <pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-3/</guid>
      <description>In this project, we leverage the OpenAI Gym environment to train a Reinforcement Learning (RL) model for playing Super Mario Bros using the Proximal Policy Optimization (PPO) algorithm. This project demonstrates the application of modern RL techniques to a classic video game, showcasing the potential and challenges of training AI agents in dynamic environments.
Steps Involved   Preprocessing the Environment:
 Setting up the OpenAI Gym environment for Super Mario Bros.</description>
    </item>
    
    <item>
      <title>App: My ToDo WebApp</title>
      <link>https://sampadk04.github.io/post/project-2/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-2/</guid>
      <description>Test the Web App https://webappmytodo.herokuapp.com
Snaps  How to Use  Add a Task:  Enter the title of your task in the title box. Enter the description of your task in the description box. Click on the Add Task button to add the task to your ToDo List.     View Your Tasks:  See your tasks listed in the ToDo List.     Update/Delete a Task:  Click on the relevant buttons in the ToDo List to update or delete a task.</description>
    </item>
    
    <item>
      <title>Project: Fast Text based Clustering</title>
      <link>https://sampadk04.github.io/post/project-1/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-1/</guid>
      <description>This project primarily uses the sklearn library for implementation.
 We explore various clustering techniques using Jaccard Similarity as a measure of closeness. Initially, we used the built-in KMeans algorithm by processing the documents as binary vectors with dimensions equal to the number of words in the vocabulary. This was applied to the KOS and NIPS datasets. Due to the inefficiency and unreliability of the above techniques (especially MiniBatchKMeans) for the Enron dataset, we developed two custom algorithms that consider the Jaccard Distance.</description>
    </item>
    
    <item>
      <title>Report: A Comparison of Regularization Techniques in DNN</title>
      <link>https://sampadk04.github.io/post/project-0/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sampadk04.github.io/post/project-0/</guid>
      <description>Reading Project Report Artificial Neural Networks (ANN) have garnered significant attention from researchers and engineers because of their ability to solve many complex problems with reasonable efficacy. When provided with sufficient data during the training process, ANNs can achieve excellent performance. However, if the training data are insufficient, the predefined neural network model may suffer from overfitting and underfitting problems. To address these issues, several regularization techniques have been devised and widely applied to ANNs.</description>
    </item>
    
  </channel>
</rss>
